@model MoovTn.Web.Models.LineViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header {


    <style>
        html, body {
           
            margin: 0;
            padding: 0;
        }

        #map {
            height: 450px;
            width: 100%;
        }

        #formulaire {
            height: 13%;
            background-color: white;
            position: relative;
            top: -30%;
            width: 60%;
            right: 15%;
            margin: 0 auto;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #msgError {
            color: red;
            font-size: 12px;
            margin-left: 12px;
            position: relative;
            bottom: 15%;
        }

        #formulaire input, #formulaire select {
            padding: 5px;
            margin: 10px;
            opacity: 1;
            color: black;
            background: white;
            width: 30%;
        }

            #formulaire input[type="button"] {
                cursor: pointer;
                width: 20%;
                border-radius: 5px;
                border: 1px solid transparent;
                color: white;
                background-color: #4d90fe;
            }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
                  display: inline;
            }
    </style>
    @*<script type="text/javascrFipt" src="stations.json" /></script>*@
    <script>

        console.log('@Html.Raw(Model.StationsJson)');
        var stations = JSON.parse('@Html.Raw(Model.StationsJson)');


    </script>




}
<div class="container">
    <h2>Line</h2>
    <br />
    <div class="row">
        <div class="col-md-3">
            <aside class="sidebar-left">
                <div class="sidebar-widget">
                    <h4>Facebook</h4>
                    <div class="fb-like-box" data-href="https://www.facebook.com/MoovTn" data-colorscheme="light" data-show-faces="1" data-header="1" data-show-border="1" data-width="233"></div>
                </div>
            </aside>
        </div>
        <div class="col-md-9">
            <div class="row">
                <div class="row">
                    <div class="col-md11">
                        <h4>Create The Path</h4>
                        <input id="pac-input" class="controls" type="text"
                               placeholder="Enter a location">
                        <div id="type-selector" class="controls">
                            <input type="radio" name="type" id="changetype-all" checked="checked">
                            <label for="changetype-all">All</label> <input type="radio"
                                                                           name="type" id="changetype-establishment"> <label for="changetype-establishment">Establishments</label> <input type="radio" name="type" id="changetype-address"> <label for="changetype-address">Addresses</label> <input type="radio"
                                                                                                                                                                                                                                                                                                     name="type" id="changetype-geocode"> <label for="changetype-geocode">Geocodes</label>
                        </div>
                        <div id="map"></div>
                    </div>
                    <br />
                    <div class="row">

                        @using (Html.BeginForm())
        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">


                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })





                                <div class="form-group">
                                    <div class="col-md-10">
                                        @Html.HiddenFor(model => model.Path, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Path, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">

                                    <input type="submit" value="Submit" class="btn btn-primary" style="float:right" />


                                    @Html.ActionLink("Back to List", "Index")

                                </div>



                            </div>
        }


                    </div>
                </div>



         
            </div></div>



  
        </div>
<br />
        @section footer{

            <script>

        function initMap() {




            var map = new google.maps.Map(document.getElementById('map'), {

                center: { lat: 36.806409, lng: 10.183444 },

                        zoom: 13
            });

            if (navigator.geolocation) {
                pos = navigator.geolocation.getCurrentPosition(function (position, pos) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,

                    };

                    map.setCenter(pos);


                    // Try HTML5 geolocation.

                    var input = (
                        document.getElementById('pac-input'));

                    var types = document.getElementById('type-selector');
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

                    var autocomplete = new google.maps.places.Autocomplete(input);
                     autocomplete.bindTo('bounds', map);

                    var infowindow = new google.maps.InfoWindow();





                    autocomplete.addListener('place_changed', function () {
                        infowindow.close();

                        var place = autocomplete.getPlace();
                        if (!place.geometry) {
                            window.alert("Autocomplete's returned place contains no geometry");
                            return;
                        }

                        // If the place has a geometry, then present it on a map.
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        } else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17);
                        }


                        var address = '';
                        if (place.address_components) {
                            address = [
                              (place.address_components[0] && place.address_components[0].short_name || ''),
                              (place.address_components[1] && place.address_components[1].short_name || ''),
                              (place.address_components[2] && place.address_components[2].short_name || '')
                            ].join(' ');
                        }

                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);


                    });
                    function setupClickListener(id, types) {
                        var radioButton = document.getElementById(id);
                        radioButton.addEventListener('click', function () {
                            autocomplete.setTypes(types);
                        });
                    }





                    setupClickListener('changetype-all', []);
                    setupClickListener('changetype-address', ['address']);
                    setupClickListener('changetype-establishment', ['establishment']);
                    setupClickListener('changetype-geocode', ['geocode']);

                    setMarkers(map);
                    function setMarkers(map) {


                        var shape = {
                            coords: [1, 1, 1, 20, 18, 20, 18, 1],
                            type: 'poly'
                        };

                        for (var i = 0; i < stations.stations.length; i++) {
                            var station = stations.stations[i];


                            var img = '~/Content/Icons/tram-station.png';
                            var marker = new google.maps.Marker({
                                position: { lat: station.lat, lng: station.lng },
                                map: map,
                                icone: img,
                                shape: shape,
                                title: station.name,

                            });
                        }
                    }

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }



            poly = new google.maps.Polyline({

                strokeColor: '#000000',
                strokeOpacity: 1.0,
                strokeWeight: 3
            });
            poly.setMap(map);

            // Add a listener for the click event
            map.addListener('click', addLatLng);

            function addLatLng(event) {


                var path = poly.getPath();

                // Because path is an MVCArray, we can simply append a new coordinate
                // and it will automatically appear.
                path.push(event.latLng);

                var points = '{"points":[';
                for (var i = 0; i < path.length; i++) {
                    if (i != 0) {
                        points += ",";
                    }
                    var point = '{"lat":' + path.j[i].lat() + ',"lng":' + path.j[i].lng() + '}';
                    points += point;
                }

                points += "]}";
                document.getElementById("Path").value = points;
               // console.log( poly.getMap());
                // Add a new marker at the new plotted point on the polyline.


            }
            //Create Directly A Line
            /*     var triangleCoords = [
    new google.maps.LatLng(36.84790557832174, 10.183444000000009),
    new google.maps.LatLng(36.85024080928426, 10.202326751464852),
    new google.maps.LatLng(36.826747883565275, 10.200953460449227)

            ];
            newpoly = new google.maps.Polygon({
                paths: triangleCoords //there are probably more method to add here
            });

            newpoly.setMap(map);*/
            var path = new google.maps.MVCArray;
            var count = 0;
            poly.setPaths(new google.maps.MVCArray([path]));
            poly.binder = new MVCArrayBinder(poly.getPath());
            google.maps.event.addDomListener(document.getElementById('getcoords'), 'click', function () {
                document.getElementById('polycoords').value = "";
                for (var i = 0; i < poly.getPath().getLength() ; i++) {
                    document.getElementById('polycoords').value += poly.getPath().getAt(i).toUrlValue(6) + "\n";
                }
            });
            function MVCArrayBinder(mvcArray) {
                this.array_ = mvcArray;
            }
            MVCArrayBinder.prototype = new google.maps.MVCObject();
            MVCArrayBinder.prototype.get = function (key) {
                if (!isNaN(parseInt(key))) {
                    return this.array_.getAt(parseInt(key));
                } else {
                    this.array_.get(key);
                }
            }
            MVCArrayBinder.prototype.set = function (key, val) {
                if (!isNaN(parseInt(key))) {
                    this.array_.setAt(parseInt(key), val);
                } else {
                    this.array_.set(key, val);
                }
            }

        }


                $(document).ready(function() {
                    // alert('hi' + document.getElementById('Station_latitude').value);
                    $("#Station_name").bind("change paste keyup", function () {
                        alert($(this).val());
                    });

                    $("#Station_name").change(function () {
                        var value = $('#Station_name').val();
                        alert(value);
                    });

                     });

            </script>
            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlFIKi7gWqv60RNeBFRhUn2GbUY35MHu0&libraries=places&callback=initMap"
                    async defer></script>



        }
