@model MoovTn.Web.Models.LineMapModel

@{
    ViewBag.Title = "IndexFront";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">

    <h2>Maps</h2>




    <h4>Choose Your Line</h4>
    <br /><br />
    <div class="row">
        <div class="col-md-3">
            <aside class="sidebar-left">



                <div class="sidebar-widget">
                    <h4>Facebook</h4>
                    <div class="fb-like-box" data-href="https://www.facebook.com/MoovTn" data-colorscheme="light" data-show-faces="1" data-header="1" data-show-border="1" data-width="233"></div>
                </div>
            </aside>
        </div>
        <div class="col-md-9">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label class="control-label col-md-2">Type</label>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.SearchType, new SelectList(new List<Object> {
               new {Value="",Name="Select A Line Type To Search"  },
               new {Value="bus",Name="Bus Line"  },
               new {Value="tram",Name="Tram Line"  },
               new {Value="train",Name="Train Line"  },
               new {Value="metro",Name="Metro Line"  },

           }, "Value", "Name"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SearchType, "", new { @class = "text-danger" })
                        </div>

                    </div>
                    <div class="col-md-6">
                        <label class="control-label col-md-2">Name</label>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.SearchName, new SelectList(new List<Object> {
               new {Value="",Name="Select A Line Name To Search"  }


           }, "Value", "Name"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SearchName, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>

            </div>
            <input id="pac-input" class="controls" type="text"
                   placeholder="Enter a location">
            <div id="type-selector" class="controls">
                <input type="radio" name="type" id="changetype-all" checked="checked">
                <label for="changetype-all">All</label> <input type="radio" name="type" id="changetype-establishment">
                <label for="changetype-establishment">Establishments</label>
                <input type="radio" name="type" id="changetype-address">
                <label for="changetype-address">Addresses</label>
                <input type="radio" name="type" id="changetype-geocode">
                <label for="changetype-geocode">Geocodes</label>
            </div>
            <div id="map"></div>
        </div>
    </div>








</div>
<br /><br />
@section header{
    <style>
        html, body {
            
            margin: 0;
            padding: 0;
        }

        #map {
            height: 550px;
            width: 100%;
        }

        #formulaire {
            height: 13%;
            background-color: white;
            position: relative;
            bottom: 15%;
            width: 70%;
            margin: 0 auto;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #msgError {
            color: red;
            font-size: 12px;
            margin-left: 12px;
            position: relative;
            bottom: 15%;
        }

        #formulaire input, #formulaire select {
            padding: 5px;
            margin: 10px;
            opacity: 1;
            color: black;
            background: white;
            width: 30%;
        }

            #formulaire input[type="button"] {
                cursor: pointer;
                width: 20%;
                border-radius: 5px;
                border: 1px solid transparent;
                color: white;
                background-color: #4d90fe;
            }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }
        
        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
                display: inline;
            }
    </style>


}

@section footer{
    <script>

        $("#SearchName").prop('disabled', true);
    </script>
    <script src="@Url.Content("~/Content/JS/RandomColor.js")"></script>
    <script>
        var map;


        function initMap() {



            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 48.833296, lng: 2.309570 },
                zoom: 13
            });






            var input = (document.getElementById('pac-input'));

            var types = document.getElementById('type-selector');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();


            google.maps.event.addListenerOnce(map, 'idle', function () {
                map.setCenter({ lat: 36.806409, lng: 10.183444 })
            });





            autocomplete.addListener('place_changed', function () {
                infowindow.close();

                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }



                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);

            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }





            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);

            //setMarkers(map);
        }
        //function setMarkers(map) {

        //    var shape = {
        //        coords: [1, 1, 1, 20, 18, 20, 18, 1],
        //        type: 'poly'
        //    };
        //    for (var i = 0; i < beaches.beaches.length; i++) {
        //        var beach = beaches.beaches[i];
        //        var img = beach.type+'-station.png';
        //        var marker = new google.maps.Marker({
        //            position: {lat: beach.lat, lng: beach.lng},
        //            map: map,
        //            icon: img,
        //            shape: shape,
        //            title: beach.name,

        //        });
        //    }
        //}


    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlFIKi7gWqv60RNeBFRhUn2GbUY35MHu0&libraries=places&callback=initMap"
            async defer></script>

    <script type="text/javascript">

        var polylines = [];
        var markers = [];

        $("#SearchType").change(function () {

            // this will call when Country Dropdown select change
            var type = $("#SearchType").val();

            if (type != '') {

                var line = $("#SearchName");
                line.empty(); // this line is for clear all items from State dropdown
                $("#SearchName").prop('disabled', false);
                line.append($("<option></option").val("").html("Select A Line Name To Search"));

                // Here I will call Controller Action via Jquery to load State for selected Country
                $.ajax({
                    url: "@Url.Action("GetLinesJson", "Line")",
                    type: "GET",
                    data: { type: type, name: '' },
                    dataType: "json",
                    success: function (data) {
                        for (var i = 0; i < polylines.length; i++) {
                            polylines[i].setMap(null);
                        }

                        for (var i = 0; i < markers.length; i++) {
                            markers[i].setMap(null);
                        }

                        polylines = [];
                        markers = [];
                        $.each(data, function (i, val) {
                            line.append(
                                    $("<option></option>").val(val.Id).html(val.Name)
                                );


                            var stations = JSON.parse(val.Stations);
                            console.log(val.Type);
                            for (var i = 0; i < stations.stations.length; i++) {
                                var station = stations.stations[i];

                                var img = "";
                                switch (station.type) {
                                    case 'bus': img = '@Url.Content("~/Content/Icons/bus-station.png")'; break;
                                    case 'train': img = '@Url.Content("~/Content/Icons/train-station.png")'; break;
                                    case 'metro': img = '@Url.Content("~/Content/Icons/metro-station.png")'; break;
                                    case 'tram': img = '@Url.Content("~/Content/Icons/tram-station.png")'; break;
                                    case 'transfert': img = '@Url.Content("~/Content/Icons/transfert-station.png")'; break;
                                }


                                var marker = new google.maps.Marker({
                                    position: { lat: station.lat, lng: station.lng },

                                    icon: img,

                                    title: station.name,

                                });
                                marker.setMap(map);
                                markers.push(marker);
                            }
                            //console.log(randomColor());
                            var path = new google.maps.Polyline({
                                path: JSON.parse(val.Path).points,
                                geodesic: true,
                                strokeColor: randomColor({ luminosity: 'dark' }),
                                strokeOpacity: 1.0,
                                strokeWeight: 6
                            });
                            polylines.push(path);

                            path.setMap(map);
                        });
                    },
                    error: function () {
                        alert("Error!");
                    }
                });
            }
        });

        $("#SearchName").change(function () {

            // this will call when Country Dropdown select change
            var name = $("#SearchName option:selected").text();
            var type = $("#SearchType").val();

            if (name != '') {



                // Here I will call Controller Action via Jquery to load State for selected Country
                $.ajax({
                    url: "@Url.Action("GetLinesJson", "Line")",
                    type: "GET",
                    data: { type: type, name: name },
                    dataType: "json",
                    success: function (data) {
                        for (var i = 0; i < polylines.length; i++) {
                            polylines[i].setMap(null);
                        }

                        for (var i = 0; i < markers.length; i++) {
                            markers[i].setMap(null);
                        }

                        polylines = [];
                        markers = [];
                        $.each(data, function (i, val) {



                            var stations = JSON.parse(val.Stations);
                            console.log(val.Type);
                            for (var i = 0; i < stations.stations.length; i++) {
                                var station = stations.stations[i];

                                var img = "";
                                switch (station.type) {
                                    case 'bus': img = '@Url.Content("~/Content/Icons/bus-station.png")'; break;
                                    case 'train': img = '@Url.Content("~/Content/Icons/train-station.png")'; break;
                                    case 'metro': img = '@Url.Content("~/Content/Icons/metro-station.png")'; break;
                                    case 'tram': img = '@Url.Content("~/Content/Icons/tram-station.png")'; break;
                                    case 'transfert': img = '@Url.Content("~/Content/Icons/transfert-station.png")'; break;
                                }


                                var marker = new google.maps.Marker({
                                    position: { lat: station.lat, lng: station.lng },

                                    icon: img,

                                    title: station.name,

                                });
                                marker.setMap(map);
                                markers.push(marker);
                            }
                            //console.log(randomColor());
                            var path = new google.maps.Polyline({
                                path: JSON.parse(val.Path).points,
                                geodesic: true,
                                strokeColor: randomColor({ luminosity: 'dark' }),
                                strokeOpacity: 1.0,
                                strokeWeight: 6
                            });
                            polylines.push(path);

                            path.setMap(map);
                        });
                    },
                    error: function () {
                        alert("Error!");
                    }
                });
            }
        });

    </script>

}
