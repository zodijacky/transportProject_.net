@model MoovTn.Web.Models.StationViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header {


    <style>
        html, body {
            margin: 0;
            padding: 0;
        }

        #map {
            height: 450px;
            width: 100%;
        }

        #formulaire {
            height: 13%;
            background-color: white;
            position: relative;
            top: -30%;
            width: 60%;
            right: 15%;
            margin: 0 auto;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #msgError {
            color: red;
            font-size: 12px;
            margin-left: 12px;
            position: relative;
            bottom: 15%;
        }

        #formulaire input, #formulaire select {
            padding: 5px;
            margin: 10px;
            opacity: 1;
            color: black;
            background: white;
            width: 30%;
        }

            #formulaire input[type="button"] {
                cursor: pointer;
                width: 20%;
                border-radius: 5px;
                border: 1px solid transparent;
                color: white;
                background-color: #4d90fe;
            }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
                display: inline;
            }
    </style>
    @*<script type="text/javascript" src="stations.json" /></script>*@
    <script>
        //function invokeAddStation() {
        //    var name = document.getElementById('stationName').value;
        //    var type = document.getElementById('stationType').value;
        //    var lat = document.getElementById('latitude').value;
        //    var lng = document.getElementById('longitude').value;
        //    var msgError = '';
        //    var result = '';
        //    if (name == "") {
        //        msgError += '*A station name should be set\t';
        //    }
        //    if (lat == "") {
        //        msgError += "*A station position should be specified    ";
        //    }
        //    if (msgError != "") {
        //        document.getElementById('msgError').innerHTML = msgError;
        //    }
        //    else {
        //        result = AddStation(name, lat, lng, type);
        //    }

        //    if (result == 'error') {
        //        document.getElementById('msgError').innerHTML = '*This station already exists!';
        //    }

        //}

        //console.log(@Html.Raw(Model.Stations));
        var stations = JSON.parse('@Html.Raw(Model.Stations)');

        //console.log(stations);

    </script>




}

<div class="container">

    <h2>Create Station</h2>
    <div class="row">
        <div class="col-md-3">
            <aside class="sidebar-left">
                <div class="sidebar-widget">
                    <h4>Facebook</h4>
                    <div class="fb-like-box" data-href="https://www.facebook.com/MoovTn" data-colorscheme="light" data-show-faces="1" data-header="1" data-show-border="1" data-width="233"></div>
                </div>
            </aside>
        </div>
        <div class="col-md-9">
            <div class="row">
                


                    @using (Html.BeginForm())
            {
                        @Html.AntiForgeryToken()


                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="col-md-12">


                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Station.name, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(m => m.Station.name) } })
                                @Html.ValidationMessageFor(model => model.Station.name, "", new { @class = "text-danger" })

                            </div>

                            <div class="col-md-5 ">


                                @Html.DropDownListFor(model => model.Station.type, new SelectList(new List<Object> {


               new {Value="train",Name="Train"  },
                new {Value="bus",Name="Bus"  },
                  new {Value="tram",Name="Tram"  },
                    new {Value="metro",Name="Metro"  },
                       new {Value="transfert",Name="Transfert"  },





           }, "Value", "Name"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Station.type, "", new { @class = "text-danger" })

                            </div>

                           
                            <div class="col-md-2">
                                <input type="submit" value="Create" class="btn btn-primary" style="float:right;" />
                            </div>
                        </div>

                        <div class="form-group">

                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Station.latitude, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Station.latitude, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">

                            <div class="col-md-10">
                                @Html.HiddenFor(model => model.Station.longitude, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Station.longitude, "", new { @class = "text-danger" })
                            </div>
                        </div>


                    }

              
            </div>
            <br/>
           
            <div class="row">
               

                    <input id="pac-input" class="controls" type="text"
                           placeholder="Enter a location">
                    <div id="type-selector" class="controls">
                        <input type="radio" name="type" id="changetype-all" checked="checked">
                        <label for="changetype-all">All</label> <input type="radio"
                                                                       name="type" id="changetype-establishment"> <label for="changetype-establishment">Establishments</label> <input type="radio" name="type" id="changetype-address"> <label for="changetype-address">Addresses</label> <input type="radio"
                                                                                                                                                                                                                                                                                                 name="type" id="changetype-geocode"> <label for="changetype-geocode">Geocodes</label>
                    </div>
                    <div id="map"></div>
               
                <br />

            </div>
        </div>
    </div>



</div>









@section footer{

    <script>

        function initMap() {




            var map = new google.maps.Map(document.getElementById('map'), {

                center: { lat: 36.806409, lng: 10.183444 },

                zoom: 13
            });
            var infoWindow = new google.maps.InfoWindow({ map: map });
            if (navigator.geolocation) {
                pos = navigator.geolocation.getCurrentPosition(function (position, pos) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,

                    };
                    infoWindow.setContent("You Are Here Drag The Marker");
                    infoWindow.setPosition(pos);
                    map.setCenter(pos);


                    // Try HTML5 geolocation.

                    var input = (
                        document.getElementById('pac-input'));

                    var types = document.getElementById('type-selector');
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

                    var autocomplete = new google.maps.places.Autocomplete(input);
                    autocomplete.bindTo('bounds', map);

                    var infowindow = new google.maps.InfoWindow();
                    var marker = new google.maps.Marker({


                        map: map,
                        anchorPoint: new google.maps.Point(0, -29),
                        title: 'Add a station here!',
                        draggable: true,
                        animation: google.maps.Animation.BOUNCE
                    });
                    google.maps.event.addListenerOnce(map, 'idle', function () {
                        map.setCenter(pos)
                    });


                    google.maps.event.addListenerOnce(map, 'idle', function () {
                        map.setCenter(pos)
                    });

                    marker.setPosition(map.center);


                    autocomplete.addListener('place_changed', function () {
                        infowindow.close();
                        marker.setVisible(false);
                        var place = autocomplete.getPlace();
                        if (!place.geometry) {
                            window.alert("Autocomplete's returned place contains no geometry");
                            return;
                        }

                        // If the place has a geometry, then present it on a map.
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        } else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17);
                        }
                        marker.setIcon(({

                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(35, 35)
                        }));
                        marker.setPosition(place.geometry.location);
                        marker.setVisible(true);

                        var address = '';
                        if (place.address_components) {
                            address = [
                              (place.address_components[0] && place.address_components[0].short_name || ''),
                              (place.address_components[1] && place.address_components[1].short_name || ''),
                              (place.address_components[2] && place.address_components[2].short_name || '')
                            ].join(' ');
                        }

                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                        infowindow.open(map, marker);

                    });
                    function setupClickListener(id, types) {
                        var radioButton = document.getElementById(id);
                        radioButton.addEventListener('click', function () {
                            autocomplete.setTypes(types);
                        });
                    }

                    marker.addListener('dragend', function () {

                        document.getElementById('Station_latitude').value = marker.position.lat();
                        document.getElementById('Station_longitude').value = marker.position.lng();

                    });



                    setupClickListener('changetype-all', []);
                    setupClickListener('changetype-address', ['address']);
                    setupClickListener('changetype-establishment', ['establishment']);
                    setupClickListener('changetype-geocode', ['geocode']);

                    setMarkers(map);
                    function setMarkers(map) {

                        var shape = {
                            coords: [1, 1, 1, 20, 18, 20, 18, 1],
                            type: 'poly'
                        };

                        for (var i = 0; i < stations.stations.length; i++) {
                            var station = stations.stations[i];


                            var img = '~/Content/Icons/tram-station.png';
                            var marker = new google.maps.Marker({
                                position: { lat: station.lat, lng: station.lng },
                                map: map,
                                icone: img,
                                shape: shape,
                                title: station.name,

                            });
                        }
                    }

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }





            // Add a listener for the click event
            map.addListener('click', addLatLng);



        }



    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlFIKi7gWqv60RNeBFRhUn2GbUY35MHu0&libraries=places&callback=initMap"
            async defer></script>



}

