@model MoovTn.Web.Models.RentModel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header {


    <style>
        html, body {
            margin: 0;
            padding: 0;
        }

        #map {
            height: 450px;
            width: 100%;
        }

        #formulaire {
            height: 13%;
            background-color: white;
            position: relative;
            top: -30%;
            width: 60%;
            right: 15%;
            margin: 0 auto;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #msgError {
            color: red;
            font-size: 12px;
            margin-left: 12px;
            position: relative;
            bottom: 15%;
        }

        #formulaire input, #formulaire select {
            padding: 5px;
            margin: 10px;
            opacity: 1;
            color: black;
            background: white;
            width: 30%;
        }

            #formulaire input[type="button"] {
                cursor: pointer;
                width: 20%;
                border-radius: 5px;
                border: 1px solid transparent;
                color: white;
                background-color: #4d90fe;
            }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
                display: inline;
            }
    </style>





}

<div class="container">
    <h2>About Rent Request</h2>

    <div class="row">
        <div class="col-md-3">
            <div class="row">
                <ul class="order-payment-list list-group">
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class=" fa fa-spinner"></i> @Html.DisplayFor(model => model.Status)</h5>                    </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">
                            <h5><i class="fa fa-users"></i>@Html.DisplayFor(model => model.members) </h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class="fa  fa-clock-o"></i> @Html.DisplayFor(model => model.dateDeparture)</h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class="fa fa-clock-o"></i>@Html.DisplayFor(model => model.dateArrival) </h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class="fa fa-calendar"></i>@Html.DisplayFor(model => model.Days) </h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class="fa fa-clock-o">&nbsp;&nbsp;<span id="time" style="    font-size: 18.2px;
    font-weight: 300;font-family: 'Roboto', arial, helvetica, sans-serif;"></span></i> </h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5   ><i class="fa fa-car">&nbsp;&nbsp;<span id="distance" style="    font-size: 18.2px;
    font-weight: 300;font-family: 'Roboto', arial, helvetica, sans-serif;"></span></i> </h5>
                        </div>
                    </li>
                    <li style="list-style: none">
                        <div class="row">

                            <h5><i class="fa fa-map-marker">
    &nbsp;&nbsp;<span id="titi" style="    font-size: 18.2px;
    font-weight: 300;font-family: 'Roboto', arial, helvetica, sans-serif;"></span>
</i> </h5>
                        </div>
                    </li>
                </ul>
            </div>
            <div class="row">
                <aside class="sidebar-left">
                    <div class="sidebar-widget">
                        <h4>Facebook</h4>
                        <div class="fb-like-box" data-href="https://www.facebook.com/MoovTn" data-colorscheme="light" data-show-faces="1" data-header="1" data-show-border="1" data-width="233"></div>
                    </div>
                </aside>
            </div>


        </div>
        <div class="col-md-1"></div>
            <div class="col-md-8">

                <div class="row">


                    <input id="pac-input" class="controls" type="text"
                           placeholder="Enter a location">
                    <div id="type-selector" class="controls">
                        <input type="radio" name="type" id="changetype-all" checked="checked">
                        <label for="changetype-all">All</label> <input type="radio"
                                                                       name="type" id="changetype-establishment"> <label for="changetype-establishment">Establishments</label> <input type="radio" name="type" id="changetype-address"> <label for="changetype-address">Addresses</label> <input type="radio"
                                                                                                                                                                                                                                                                                                 name="type" id="changetype-geocode"> <label for="changetype-geocode">Geocodes</label>
                    </div>
                    <div id="map"></div>

                    <br />

                </div>
                <div class=" row">
                    <div class="col-md-9"></div>


                    <div class="col-md-3">
                        @Html.ActionLink("Cancel Rent Request", "Delete", new { id = @Html.DisplayFor(model => model.idRent) })
                    </div>
                </div>



            </div>
        </div>




</div>








@section footer{

    <script>




        function initMap() {

            var directionDisplay;
            var directionsService = new google.maps.DirectionsService();


            var map = new google.maps.Map(document.getElementById('map'), {

                center: { lat: 36.806409, lng: 10.183444 },

                        zoom: 13
            });
            //var infoWindow = new google.maps.InfoWindow({ map: map });
            directionsDisplay = new google.maps.DirectionsRenderer();
            directionsDisplay.setMap(map);

            var start = '@Html.DisplayFor(model => model.latitudeDeparture), @Html.DisplayFor(model => model.longitudeDeparture)';
            var end = '@Html.DisplayFor(model => model.latitudeArrival), @Html.DisplayFor(model => model.longitudeArrival)';

             var bounds = new google.maps.LatLngBounds;
             var markersArray = [];


  var origin1 =  start;


  var destinationB = end;


      var geocoder = new google.maps.Geocoder;

      var service = new google.maps.DistanceMatrixService;
      service.getDistanceMatrix({
    origins: [origin1],
    destinations: [destinationB],
    travelMode: google.maps.TravelMode.DRIVING,
    unitSystem: google.maps.UnitSystem.METRIC,
    avoidHighways: false,
    avoidTolls: false
  }, function(response, status) {
      if (status !== google.maps.DistanceMatrixStatus.OK) {
          alert('Error was: ' + status);
      } else {
          var originList = response.originAddresses;
          var destinationList = response.destinationAddresses;
          var outputDiv = document.getElementById('titi');
          outputDiv.innerHTML = '';

          var outputTime = document.getElementById('time');
          outputTime.innerHTML = '';


          var outputDistance = document.getElementById('distance');
          outputDistance.innerHTML = '';

          deleteMarkers(markersArray);
          function deleteMarkers(markersArray) {
              for (var i = 0; i < markersArray.length; i++) {
              markersArray[i].setMap(null);
          }
          markersArray = [];
      }

      for (var i = 0; i < originList.length; i++) {
        var results = response.rows[i].elements;

        for (var j = 0; j < results.length; j++) {

            outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j];
            outputTime.innerHTML += results[j].duration.text;
            outputDistance.innerHTML += results[j].distance.text;


        }

//        document.getElementById('titi').value = results[0].duration.text;
      }
    }
  });



            var request = {
                origin: start,
                destination: end,
                travelMode: google.maps.DirectionsTravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                    var myRoute = response.routes[0];
                    var txtDir = '';
                    for (var i = 0; i < myRoute.legs[0].steps.length; i++) {
                        txtDir += myRoute.legs[0].steps[i].instructions + "<br />";
                    }
                    document.getElementById('directions').innerHTML = txtDir;
                }
            });

                    var input = (
                        document.getElementById('pac-input'));

                    var types = document.getElementById('type-selector');
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

                    var autocomplete = new google.maps.places.Autocomplete(input);
                    autocomplete.bindTo('bounds', map);

                    var infowindow = new google.maps.InfoWindow();
                    icon = "http://weizen-tech.com/icons/myPosition.png";
                    icon2 = "http://weizen-tech.com/icons/myDestination.png";


                    google.maps.event.addListenerOnce(map, 'idle', function () {
                        map.setCenter(center)
                    });


                    google.maps.event.addListenerOnce(map, 'idle', function () {
                        map.setCenter(center)
                    });

                   // marker.setPosition(map.center);
                    //marker2.setPosition(map.center);

                    autocomplete.addListener('place_changed', function () {
                        infowindow.close();

                        var place = autocomplete.getPlace();
                        if (!place.geometry) {
                            window.alert("Autocomplete's returned place contains no geometry");
                            return;
                        }

                        // If the place has a geometry, then present it on a map.
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        } else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(17);
                        }



                        var address = '';
                        if (place.address_components) {
                            address = [
                              (place.address_components[0] && place.address_components[0].short_name || ''),
                              (place.address_components[1] && place.address_components[1].short_name || ''),
                              (place.address_components[2] && place.address_components[2].short_name || '')
                            ].join(' ');
                        }

                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);


                    });
                    function setupClickListener(id, types) {
                        var radioButton = document.getElementById(id);
                        radioButton.addEventListener('click', function () {
                            autocomplete.setTypes(types);
                        });
                    }








                    var geocoder = new google.maps.Geocoder;

                    var infowindow = new google.maps.InfoWindow;


                    setupClickListener('changetype-all', []);
                    setupClickListener('changetype-address', ['address']);
                    setupClickListener('changetype-establishment', ['establishment']);
                    setupClickListener('changetype-geocode', ['geocode']);











        }




    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlFIKi7gWqv60RNeBFRhUn2GbUY35MHu0&libraries=places&callback=initMap"
            async defer></script>



}

